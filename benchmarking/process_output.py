"""
This module processes the output generated by write_output module.
It generates a csv file latencies.csv that contains 50th, 95th and 99th
percentile latencies for all APIs for different values of Total QPS
and a fixed probability distribution of API weights.
"""
import configparser
import pandas as pd
import csv

config = configparser.ConfigParser()
config.read('config.ini')
file_names = config['File Names']

INPUT_FILE_NAME = file_names['WRITE_OUTPUT']
OUTPUT_FILE_NAME = file_names['PROCESS_OUTPUT']

CSV_COLUMN_NAMES = ["API Name", "Total QPS", "login QPS", "viewUser QPS", "getUsersByMobileNumber QPS", "listChats QPS",
                    "listMessages QPS", "createChat QPS", "createMessage QPS", "signup QPS", "50th Percentile Latency",
                    "95th Percentile Latency", "99th Percentile Latency"]
API_NAMES = ["login", "viewUser", "getUsersByMobileNumber", "listChats", "listMessages", "createChat", "createMessage",
             "signup"]


class ProcessOutput:
    """
    A class for processing the response times output file to compute following latencies:
        1. 50th percentile latency
        2. 95th percentile latency
        3. 99th percentile latency
    It computes the above latencies for all APIs for different qps and stores the final output to a CSV file.

    Attributes:
        unique_total_qps_values: list of total qps values at which the latencies should be computed.
    """
    def __init__(self, all_qps):
        self.unique_total_qps_values = all_qps

    def process_output(self):
        input_data = pd.read_csv(INPUT_FILE_NAME)
        api_wise_input_data = [(input_data[input_data['API Name'] == api_name], api_name) for api_name in API_NAMES]

        csv_file = open(OUTPUT_FILE_NAME, 'w')
        writer = csv.DictWriter(csv_file, fieldnames=CSV_COLUMN_NAMES)
        writer.writeheader()

        for total_qps in self.unique_total_qps_values:
            data_for_total_qps = input_data[input_data['Total QPS'] == total_qps]
            data_for_total_qps.reset_index(drop=True, inplace=True)
            qps_values = dict()
            qps_values['Total QPS'] = total_qps
            for api in API_NAMES:
                column_name = api + " QPS"
                qps_values[column_name] = data_for_total_qps[column_name][0]
            for data, api_name in api_wise_input_data:
                api_wise_data_for_total_qps = data[data['Total QPS'] == total_qps]
                writer.writerow({**qps_values, **compute_latencies(api_wise_data_for_total_qps, api_name)})

        csv_file.close()


def compute_latencies(df, api_name):
    """
    Computes 50th, 95th and 99th percentile latencies for a given API
    using the given response times for a fixed total qps value.

    :param df: response times for an API for a fixed total qps value
    :param api_name: API name for which the response times are given
    :return: a dictionary with following keys:
                1. API Name
                2. 50th Percentile Latency
                3. 95th Percentile Latency
                4. 99th Percentile Latency
    """
    latency_values = dict()
    latency_values['API Name'] = api_name
    total_count = len(df.index)
    if total_count == 0:
        latency50 = 0
        latency95 = 0
        latency99 = 0
    else:
        sorted_df = df.sort_values(by=['ResponseTime'])
        sorted_df.reset_index(drop=True, inplace=True)
        latency50 = sorted_df['ResponseTime'][max(round(total_count * 0.5) - 1, 0)]
        latency95 = sorted_df['ResponseTime'][round(total_count * 0.95) - 1]
        latency99 = sorted_df['ResponseTime'][round(total_count * 0.99) - 1]
    latency_values['50th Percentile Latency'] = latency50
    latency_values['95th Percentile Latency'] = latency95
    latency_values['99th Percentile Latency'] = latency99
    return latency_values
